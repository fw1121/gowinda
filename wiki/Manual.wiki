#summary A description of Gowinda

<wiki:toc max_depth="3"/>

= Introduction =

Gowinda is a software for identifying significant enrichment of GO categories from genome wide association studies (GWAS). GO analysis from GWAS frequently suffer from a gene length bias, in which longer genes typically have more SNPs and consequently also have a higher probability of containing a candidate SNPs. Classical GO analysis in which the genes containing a candidate SNP are compared to the total set of genes may result in an overrepresentation of GO categories having a high fraction of long genes. In fact for an example of 1000 randomly drawn candidate SNPs in _D. melanogaster_ we show that an uncorrected GO analysis may identify ~341 false positive GO categories (http://code.google.com/p/gowinda/wiki/Validation). A further source of bias are overlapping genes, which violate the assumption of the classical GO analysis, that genes are drawn independently .
Gowinda addresses these two sources of error with a permutation test. Gowinda randomly draws the same number of SNPs as candidate SNPs, several million times, and subsequently derives an empirical null distribution of the abundance of genes for every GO category. P-values for the candidate SNPs are derived by comparing the abundance of genes resulting from the candidate SNPs to the empirical null distribution. Furthermore FDR correction for multiple testing is also done from the empirical null distribution.

For a validation of Gowinda please see: http://code.google.com/p/gowinda/wiki/Validation
In this validation we show that Gowinda yields highly reliable results (comparision with !GoMiner) efficiently corrects for the gene length bias while still identifying significantly overrepresented GO categories. We also demonstrate that the gene length bias has an tremendous influence on the GO analysis potentially causing an extensive amount of false positive GO categories.

= Requirements =
Gowinda requires the following software installed:
  * Java 6 or higher
Furthermore the following input files are required
  * a file containing the annotation of the genome in .gtf
  * a GO association file containing for every GO category a list of associated gene_ids
  * a file containing the total set of SNPs
  * a file containing the candidate SNPs
== Annotation (.gtf) ==
The annotation must be in the gtf format: http://mblab.wustl.edu/GTF22.html
Gowinda however only requires the attribute `gene_id`, the attribute `transcript_id` is optional. Following an example of a minimal annotation file.
{{{
2L      FlyBase exon    8193    9484    .       +       .       gene_id "CG11023";
2L      FlyBase exon    8193    8589    .       +       .       gene_id "CG11023";
2L      FlyBase exon    8668    9484    .       +       .       gene_id "CG11023";
2L      FlyBase exon    9839    11344   .       -       .       gene_id "CG2671";
2L      FlyBase exon    11410   11518   .       -       .       gene_id "CG2671";
}}}
Furthermore the feature column (column 3) must either contain `exon` or `CDS`, all other features will be ignored. Column 2 (source), column 6 (score), and column 8 (offset) are ignored and have no influence on the results.

It is not necessary that the entries are unique, Gowinda is internally reducing multiple copies of the same entry to a single one.

Gowinda does not support the `.gff` format as it less transparent as the `.gtf` format (e.g.: in order to obtain the gene_id for a given exon it is necessary to traverse the hierarchy exon -> mRNa -> gene) and has several sources of inconsistencies (exons without parent (mRNA), exons with several parents).
We however provide a script for converting a `.gff` file into a `.gtf` file: http://gowinda.googlecode.com/files/Gff2Gtf.py

The user may thus assure that the annotation is correctly converted before providing it to Gowinda. 
== GO association ==
The GO association file may be directly obtained from the download section of !FuncAssociate2 (http://llama.mshri.on.ca/funcassociate/download_go_associations) or indirectly from !GoMiner (see tutorial: http://code.google.com/p/gowinda/wiki/Tutorial)

Following an example of a GO association file
{{{
GO:0000002      mitochondrial genome maintenance        CG11077 CG33650 CG4337 CG5924
GO:0000003      reproduction    CG10112 CG10128 CG1262 CG13873 CG14034 CG15117 CG15616 CG1656 CG17011 CG17097 CG17673 CG17799 CG17843 CG1803 CG2665 CG2668 CG2852 CG30450 CG30473 CG31680 CG31
704 CG31872 CG31883 CG31941 CG32203 CG32498 CG32667 CG33943 CG34033 CG34034 CG34102 CG3662 CG3801 CG42461 CG42462 CG42466 CG42468 CG42469 CG42472 CG42474 CG42475 CG42477 CG42478 CG42479 CG42
480 CG42482 CG42483 CG42485 CG42564 CG42602 CG42603 CG42604 CG42605 CG42606 CG42607 CG42608 CG42609 CG4546 CG4706 CG4847 CG4986 CG6555 CG6690 CG6917 CG7157 CG8137 CG8462 CG8622 CG8626 CG8982
 CG9024 CG9029 CG9074 CG9111 CG9334 CG9997
GO:0000009      alpha-1,6-mannosyltransferase activity  CG8412
GO:0000010      trans-hexaprenyltranstransferase activity       CG10585 CG31005
GO:0000012      single strand break repair      CG4208 CG5316
GO:0000014      single-stranded DNA specific endodeoxyribonuclease activity     CG10215 CG10670 CG10890 CG2990
GO:0000015      phosphopyruvate hydratase complex       CG17654
GO:0000017      alpha-glucoside transport       CG30035
}}}
The file consists of three tab-delimited columns
  * column 1: the GO category
  * column 2: the description of the GO category. Note that spaces are allowed but no tabs
  * column 3: a space separated list of gene ids for the given GO category

*NOTE:* the `gene_ids` of the annotation need to be identical to the `gene_ids` of the GO association file. The case is not considered as Gowinda internally converts all `gene_ids` to lower-case.
However a problem may arise as many `gene_ids` have synonyms. One strategy to deal with this problem is to use the GO association file from !GoMiner (see tutorial http://code.google.com/p/gowinda/wiki/Tutorial)

== total SNP file ==
This file must contain all the SNPs used for the GWAS in a very simple tab-delimited file format. Following you can see the simplest example
{{{
2L	117081
2L	117082
2L	144234
2L	252591
2L	283388
2L	318365
2L	320282
2L	378118
2L	378119
2L	476447
}}}
  * column 1: the chromosome
  * column 2: the position

*NOTE:* Gowinda ignores all additional columns after column 2, thus it is for example also possible to provide a pileup file  as shown in the followinge example
{{{
2R	2299	N	4	TTT^FT	AAAA	4	TTT^FT	AAAA
2R	2300	N	5	AAAA^FA	AAAAA	5	AAAA^FA	AAAAA
2R	2301	N	6	TTTTT^FT	AAAAAA	6	TTTTT^FT	AAAAAA
2R	2302	N	7	TTTTTT^FT	AAAAAAA	7	TTTTTT^FT	AAAAAAA
2R	2303	N	8	TTTTTTT^FT	AAAAAAAA	8	TTTTTTT^FT	AAAAAAAA
}}}

== candidate SNP file == 
the same applies as for the total SNP file, except that the candidate SNPs must be a subset of the total SNPs.

= Gowinda =

For an example of how to use Gowinda with real data please see the tutorial: http://code.google.com/p/gowinda/wiki/Tutorial
== Parameters ==
Gowinda has the following input parameters

  * `--annotation-file`: a file containing the annotation for the species of interest. Only the `.gtf` format is accepted (see above). Mandatory parameter
  * `--go-association-file`: a file containing for every GO term the associated genes; For the file format see above; Mandatory parameter
  * `--snp-file`: a file containing the total set of SNPs that were used for the GWAS. For the file format see above; Mandatory parameter
  * `--candidate-snp-file`: a file containing the candidate SNPs that show some association with the trait of interest. For the file format see above; Mandatory parameter
  * `--output-file`: where to store the output. Mandatory parameter
  * `--mode`: As a major feature Gowinda offers two main analysis modes either `snp` or `gene`; For description see below; Optional parameter; default=`gene`
  * `--gene-definition`: As another major feature Gowinda allows to adjust the SNP to gene mapping, i.e.: to decide which genes are associated with a given SNP. For example the user may decide that only SNPs being located in an exon are associated with the corresponding gene. See detailed description below; possible arguments: `exon`, `cds`, `utr`,`gene`, `upstreamDDDD`, `downstreamDDDD`, `updownstreamDDDD`; Mandatory parameter 
  * `--simulations`: the number of simulations that should be performed. This will have a direct influence on the minimum possible p-value; For example with 1.000.000 simulations the minimum possible p-value is 1.0e-6; Increase the number of simulations if you need a higher resoultion/precision; Note that incresasing the number of simulations will not result in larger numbers of significant GO categories
  * `--min-genes`: filter for GO categories having at least `--min-genes` number of genes; This parameter is for example useful to remove small GO categories having only one associated gene; Optional parameter; default=1
  * `--min-significance`: only report GO categories having  after FDR correction `p-value <= --min-significance`; Optional parameter; default=1.0
  * `--detailed-log`: switch to the detailed log mode. The IDs of genes present in the GO association file but not present in the annotation will be displayed. Also the progress of the simulations will be shown in steps of 10.000; Optional parameter
  * `--threads`: the simulations of Gowinda utilize multi-threading. Adjust the number of threads to use. Optional parameter; default=1
  * `--help`: show the help for Gowinda; Optional parameter

=== analysis mode `gene` ===
In this mode Gowinda randomly picks SNPs until the corresponding number of genes equals the number of genes associated with the candidate SNPs. The number of genes is thus constant in each round of random sampling but the number of randomly picked SNPs may differ between rounds. Finally to derive the p-values, the numbers of candidate genes (genes having a candidate SNP) are compared to the empirical null distribution for every GO category.

*NOTE:* in this mode every gene is considered only once even when containing several candidate/random SNPs.

We generally recommend this mode.

=== analysis mode `snp` ===
In this mode Gowinda randomly picks SNPs until the number of random SNPs equals the number of candidate SNPs. The number of SNPs is thus constant in each round of random sampling but the number of corresponding genes may differ between rounds. Furthermore genes will be counted multiple times according to the number of contained candidate/random SNPs. Finally to derive p-values the numbers of candidate genes, whereas each gene may be counted several times, are compared to the empirical null distribution for every GO category.

We recommend this mode when assuming that linkage disequilibrium decays quickly and that the candidate SNPs are thus independently.

=== SNP to gene mapping ===
SNP to gene mapping determines the genes that are associated with a given SNP. For example a user may elect that only SNPs in exons are associated with genes or another user - more interested in regulatory regions - may choose that also SNPs at most 500bp upstream of the first exon are associated with genes. Gowinda only loads the genomic features `exon` and `cds` all following features are thus internally calculated from these two. 
  * `exon`: SNPs within exons are associated with genes
  * `cds`: SNPs within CDS are associated with genes
  * `utr`: SNPs within 5'-UTR and 3'-UTR are associated with genes. Caluclated as `exon - cds`
  * `gene`: SNPs within exons or introns are associated with genes. Internally the distance from the start position of the first exon to the end position of the last exon is computed
  * `upstreamDDDD`: in addition to exons and introns also the DDDD bases upstream the start of a gene are considered for mapping a SNP to a gene. DDDD must be replaced with an arbitrary number. This method requires the strand information.
  * `downstreamDDDD`: in addition to exons and introns also the DDDD bases downstream of the end of the gene are considered for mapping a SNP to a gene. DDDD must be replaced with an arbitrary number. This method requires the strand information.
  * `updownstreamDDDD`: in addition to  exons and introns also the DDDD bases upstream the start of a gene and the DDDD bases downstream of the end of a gene are considered for mapping a SNP to a gene. DDDD must be replaced with an arbitrary number. This method does NOT require strand information. 


*NOTE:* we found examples where exons from a single gene are on opposite strands, in this case Gowinda uses the majority vote, i.e.: the strand of the most exons



== Output ==

== Benchmarks == 
Ram CPU

= Scripts =
== !Gff2Gtf.py ==
== !Gominer2FuncAssociate.py ==