#summary A description of Gowinda

<wiki:toc max_depth="3"/>

= Introduction =

Gowinda is a software for identifying significant enrichment of GO categories from genome wide association studies (GWAS). GO analysis from GWAS frequently suffer from a gene length bias, in which longer genes typically have more SNPs and consequently also have a higher probability of containing a candidate SNPs. Classical GO analysis in which the genes containing a candidate SNP are compared to the total set of genes may result in an overrepresentation of GO categories having a high fraction of long genes. In fact for an example of 1000 randomly drawn candidate SNPs in _D. melanogaster_ we show that an uncorrected GO analysis may identify ~341 false positive GO categories (http://code.google.com/p/gowinda/wiki/Validation). A further source of bias are overlapping genes, which violate the assumption of the classical GO analysis, that genes are drawn independently .
Gowinda addresses these two sources of error with a permutation test. Gowinda randomly draws the same number of SNPs as candidate SNPs, several million times, and subsequently derives an empirical null distribution of the abundance of genes for every GO category. P-values for the candidate SNPs are derived by comparing the abundance of genes resulting from the candidate SNPs to the empirical null distribution. Furthermore FDR correction for multiple testing is also done from the empirical null distribution.

For a validation of Gowinda please see: http://code.google.com/p/gowinda/wiki/Validation
In this validation we show that Gowinda yields highly reliable results (comparision with !GoMiner) efficiently corrects for the gene length bias while still identifying significantly overrepresented GO categories.

= Requirements =
Gowinda requires the following software installed:
  * Java 6 or higher
Furthermore the following input files are required
  * a file containing the annotation of the genome in .gtf
  * a GO association file containing for every GO category a list of associated gene_ids
  * a file containing the total set of SNPs
  * a file containing the candidate SNPs
== Annotation (.gtf) ==
The annotation must be in the gtf format: http://mblab.wustl.edu/GTF22.html
Gowinda however only requires the attribute `gene_id`, the attribute `transcript_id` is optional. Following an example of a minimal annotation file.
{{{
2L      FlyBase exon    8193    9484    .       +       .       gene_id "CG11023";
2L      FlyBase exon    8193    8589    .       +       .       gene_id "CG11023";
2L      FlyBase exon    8668    9484    .       +       .       gene_id "CG11023";
2L      FlyBase exon    9839    11344   .       -       .       gene_id "CG2671";
2L      FlyBase exon    11410   11518   .       -       .       gene_id "CG2671";
}}}
Furthermore the feature column (column 3) must either contain `exon` or `CDS`, all other features will be ignored. Column 2 (source), column 6 (score), column 7 (strand), and column 8 (offset) are ignored and have no influence on the results.

It is not necessary that the entries are unique, Gowinda is internally reducing multiple copies of the same entry to a single one.

Gowinda does not support the `.gff` format as it less transparent as the `.gtf` format (e.g.: in order to obtain the gene_id for a given exon it is necessary to traverse the hierarchy exon -> mRNa -> gene) and has several sources of inconsistencies (exons without parent (mRNA), exons with several parents).
We however provide a script for converting a `.gff` file into a `.gtf` file: http://gowinda.googlecode.com/files/Gff2Gtf.py

The user may thus assure that the annotation is correctly converted before providing it to Gowinda. 
== GO association ==
The GO association file may be directly obtained from the download section of FuncAssociate2 (http://llama.mshri.on.ca/funcassociate/download_go_associations) or indirectly from GoMiner (see tutorial: http://code.google.com/p/gowinda/wiki/Tutorial?ts=1330597385&updated=Tutorial)

= Gowinda =

= Scripts =
== !Gff2Gtf.py ==
== !Gominer2FuncAssociate.py ==