#summary Validating Gowinda by comparing simulated data to !GoMiner

<wiki:toc max_depth="2"/>

= Introduction =

== Files ==
The files necessary for validating Gowinda can be found here http://gowinda.googlecode.com/files/validation_files.zip

This archive contains:
  * the Python scripts used in the validation process shown below
  * the annotation of _D. melanogaster_ (v5.43)
  * the GO associations obtained from !GoMiner for 'CG' gene_ids


= Validating Gowinda by comparing the results to !GoMiner =
In order to compare Gowinda with !GoMiner it is necessary to perform an analysis of GO term enrichment only with genes that are (i) not overlapping and (ii) having an associated GO term. Furthermore to avoid the gene length bias we introduced into every gene exactly 5 SNPs.
We than subsequently drew 1000 SNPs randomly and compared the results obtained with Gowinda to the results obtained with !GoMiner.

== Obtain a set of genes that are not overlapping and have an associated GO term == 
First obtain a set of non-overlapping gene_ids
{{{
python ../scripts/get_nonoverlapping_geneids.py --gtf Flybase.gtf > nonoverlapping_genes.txt
}}}
Than filter this set further for gene_ids that have an associated GO term
{{{
python ../scripts/get_geneids_havinggocategory.py --go association_gominer.txt --genelist nonoverlapping_genes.txt > geneids_withgoterm_nooverlap.txt
}}}
== Introduce five SNPs into each of the non-overlapping genes ==
{{{
python ../scripts/create_snps_for_genes.py --genelist geneids_withgoterm_nooverlap.txt --gtf Flybase.gtf > snps_5pgene.txt
}}}
== Choose 1000 random SNPs ==
{{{
cat snps_5pgene.txt|perl -ne 'print if rand()<0.03'|head -1000 > rand_snps_1k.txt
}}}
== Perform GO term analysis with Gowinda ==
{{{
/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Commands/java -Xmx4g -jar /Users/robertkofler/dev/PopGenTools/gowinda/Gowinda.jar --snp-file snps_5pgene.txt  --candidate-snp-file rand_snps_1k.txt --go-association-file association_gominer.txt --annotation-file Flybase.gtf --simulations 1000000 --min-significance 1 --gene-definition exon --threads 8 --output-file gowinda_res.txt --mode gene --min-genes 5
}}}
== Perform GO term analysis with !GoMiner==
For the analysis with GoMiner we need two lists of gene_ids. One with the total set of gene_ids and one with the subset of gene_ids which should be tested for an enrichment
{{{
cat snps_5pgene.txt| awk '{print $3}'|sort |uniq > gominer_total.txt
cat rand_snps_1k.txt| awk '{print $3}'|sort |uniq > gominer_totest.txt
}}}

Subsequently use High-Troughput GoMiner: http://discover.nci.nih.gov/gominer/GoCommandWebInterface.jsp

Following you can find the settings that we used with !GoMiner
{{{
totalfile=gominer_total.txt
changedfile=gominer_totest.txt
datasource=FB
organism=7227
evidencecode=all
crossref=true
synonym=true
thresholdtype=BOTH
timeseriesthreshold=0.05
randomization=100
categorymin=5
cim=1
categorymax=10000
rootcategory=all
tf=0
email=xxx@xxx
}}}

== Extract the results of Gowinda and !GoMiner ==
From the GoMiner results you need to extract the file: gominer_totest.txt.change

{{{
cat gowinda_res.txt| awk '{print $1,$4}'|sort -k1,1 > merged/tm_gowinda.txt
cat GoMiner/gominer_totest.txt.change.gce |awk 'NF>5{print $1,10^$5}'|perl -pe 's/_[^ ]+//' |sort -k1,1> merged/tm_gominer.txt
}}}