#summary Validating Gowinda by comparing simulated data to !GoMiner

<wiki:toc max_depth="2"/>

= Introduction =

We validated Gowinda in three ways:
  * first we randomly drew 1000 SNPs from a dataset not having the gene length bias and compared the results of Gowinda to !GoMiner. We found that the p-values reported by Gowinda and !GoMiner are highly correlated (Spearman's rank correlation; rho=0.99).
  * second we randomly drew 1000 SNPs from a dataset having the gene length bias and again compared the results of Gowinda and !GoMiner. We found that !GoMiner reports an significant enrichment for ~300 GO categories, whereas Gowinda correctly reports none!
  * and third we tested whether Gowinda correctly finds an enrichment for 5 small GO categories which were randomly chosen. We picked a SNP in each gene of these small target GO categories and added random SNPs from the gene length biased dataset until a total of 1000SNPs was obtain. We found that Gowinda correctly identified these targeted GO categories (FDR<0.01).

== Files ==
The files necessary for validating Gowinda can be found here http://gowinda.googlecode.com/files/validation_files.zip

This archive contains:
  * the Python scripts used in the validation process shown below
  * the annotation of _D. melanogaster_ (v5.43)
  * the GO associations obtained from !GoMiner for 'CG' gene_ids

The results for the validation of Gowinda by comparing the results to !GoMiner can be found here: http://gowinda.googlecode.com/files/step1_valGoMiner.zip


= Validating Gowinda by comparing the results to !GoMiner =
As !GoMiner does not correct for the gene length bias nor consider overlapping genes it was necessary to use a dataset not showing these two problems. We therefore (i) filtered for not-overlapping genes (ii) filtered for genes that have an associated GO term and (iii) introduced exactly 5 SNPs in each of these filtered genes. 
Subsequently we randomly picked 1000 SNPs and compared the p-values obtained with Gowinda to the p-values obtained with !GoMiner (without FDR correction).

== Obtain a set of genes that are not overlapping and have an associated GO term == 
First obtain a set of non-overlapping gene_ids
{{{
python ../scripts/get_nonoverlapping_geneids.py --gtf Flybase.gtf > nonoverlapping_genes.txt
}}}
Than filter this set further for gene_ids that have an associated GO term
{{{
python ../scripts/get_geneids_havinggocategory.py --go association_gominer.txt --genelist nonoverlapping_genes.txt > geneids_withgoterm_nooverlap.txt
}}}
== Introduce five SNPs into each of the non-overlapping genes ==
{{{
python ../scripts/create_snps_for_genes.py --genelist geneids_withgoterm_nooverlap.txt --gtf Flybase.gtf > snps_5pgene.txt
}}}
== Choose 1000 random SNPs ==
{{{
cat snps_5pgene.txt|perl -ne 'print if rand()<0.03'|head -1000 > rand_snps_1k.txt
}}}
== Perform GO term analysis with Gowinda ==
{{{
/System/Library/Frameworks/JavaVM.framework/Versions/1.6.0/Commands/java -Xmx4g -jar /Users/robertkofler/dev/PopGenTools/gowinda/Gowinda.jar --snp-file snps_5pgene.txt  --candidate-snp-file rand_snps_1k.txt --go-association-file association_gominer.txt --annotation-file Flybase.gtf --simulations 1000000 --min-significance 1 --gene-definition exon --threads 8 --output-file gowinda_res.txt --mode gene --min-genes 5
}}}
== Perform GO term analysis with !GoMiner==
For the analysis with GoMiner we need two lists of gene_ids. One with the total set of gene_ids and one with the subset of gene_ids which should be tested for an enrichment
{{{
cat snps_5pgene.txt| awk '{print $3}'|sort |uniq > gominer_total.txt
cat rand_snps_1k.txt| awk '{print $3}'|sort |uniq > gominer_totest.txt
}}}

Subsequently use High-Troughput GoMiner: http://discover.nci.nih.gov/gominer/GoCommandWebInterface.jsp

Following you can find the settings that we used with !GoMiner
{{{
totalfile=gominer_total.txt
changedfile=gominer_totest.txt
datasource=FB
organism=7227
evidencecode=all
crossref=true
synonym=true
thresholdtype=BOTH
timeseriesthreshold=0.05
randomization=100
categorymin=5
cim=1
categorymax=10000
rootcategory=all
tf=0
email=xxx@xxx
}}}

== Extract the results of Gowinda and !GoMiner ==
From the GoMiner results you need to extract the file: gominer_totest.txt.change

{{{
cat gowinda_res.txt| awk '{print $1,$4}'|sort -k1,1 > merged/tm_gowinda.txt
cat GoMiner/gominer_totest.txt.change |awk 'NF>5{print $1,10^$5}'|perl -pe 's/_[^ ]+//' |sort -k1,1> merged/tm_gominer.txt
join -1 1 -2 1 tm_gominer.txt tm_gowinda.txt > merged_min_win.txt
}}}
The resulting file contains for every GO category (column 1) the p-value obtained with !GoMiner (column 2) and Gowinda (column 3)

== Results == 
Our results (including our random SNPs) for the comparision of Gowinda with !GoMiner can be found here: http://gowinda.googlecode.com/files/step1_valGoMiner.zip
These results (merged_min_win.txt) can now be analyzed in R.
With an FDR of <0.05 neither !GoMiner nor Gowinda found any significant GO categories.